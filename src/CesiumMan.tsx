/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import * as SkeletonUtils from "three/examples/jsm/utils/SkeletonUtils";
import React, { useEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cesium_Man: THREE.SkinnedMesh;
    Skeleton_torso_joint_1: THREE.Bone;
  };
  materials: {
    ["Cesium_Man-effect"]: THREE.MeshStandardMaterial;
  };
};

type ActionName = "animation_0";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Model(props: JSX.IntrinsicElements["group"] & { tmp: number }) {
  // const group = useRef<THREE.Group>();
  const { scene, nodes, materials, animations } = useGLTF(
    "/CesiumMan.glb"
  ) as unknown as GLTFResult;

  // const { actions } = useAnimations<GLTFActions>(animations, group);

  // const mesh = nodes.Cesium_Man;
  // const bone = nodes.Skeleton_torso_joint_1;

  const copiedScene = useMemo(() => SkeletonUtils.clone(scene), [nodes]);
  console.log(copiedScene);
  const skinnedMesh = copiedScene.getObjectByProperty(
    "type",
    "SkinnedMesh"
  ) as THREE.SkinnedMesh;
  console.log(skinnedMesh);
  console.log(skinnedMesh.material);

  useEffect(() => {
    const bone = skinnedMesh.skeleton.bones[1];
    bone.rotation.x = props.tmp / 30;
  });
  return (
    <group {...props} dispose={null}>
      <primitive object={copiedScene} />

      <group>
        <group name="Z_UP" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Armature" rotation={[0, 0, -Math.PI / 2]}>
            {/* <primitive object={bone} /> */}
            {/* <primitive object={mesh} /> */}
            {/* <skinnedMesh
              name="Cesium_Man"
              geometry={mesh.geometry}
              material={materials["Cesium_Man-effect"]}
              skeleton={mesh.skeleton}
            /> */}
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/CesiumMan.glb");
